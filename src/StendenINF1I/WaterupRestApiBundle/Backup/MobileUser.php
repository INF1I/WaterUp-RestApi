<?php
/**
 * Author: Joris Rietveld <jorisrietveld@gmail.com>
 * Created: 31-05-2017 12:50
 * Licence: GNU General Public licence version 3 <https://www.gnu.org/licenses/quick-guide-gplv3.html>
 */
declare(strict_types=1);

namespace StendenINF1I\WaterupRestApiBundle\Entity;

/**
 * @ORM\Entity
 * @ORM\Table(name="MobileUser")
 * @Gedmo\SoftDeleteable(fieldName="dateRemoved", timeAware=false)
 */
class MobileUser
{
    /**
     * This column holds the unique record identification code that is generated by the database upon record creation.
     *
     * @var int
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * This column holds the device's Universally Unique Identifier that can be used for uniquely identifying
     * the clients mobile device.
     *
     * @var string
     * @ORM\Column(name="uuid", type="string", unique=TRUE, length=255)
     * @Required
     */
    protected $UUID;

    /**
     * This column holds the platform name of the device it could be something like: Android, BlackBerry 10, iOS.
     *
     * @var string
     * @ORM\Column(name="device_platform", type="string")
     */
    protected $devicePlatform;

    /**
     * This column holds the version number of the platform the device is running for android it could be something
     * like: 4.3, 4.4 or 4.4-update1.
     *
     * @var string
     * @ORM\Column(name="device_platform_version", type="string")
     */
    protected $devicePlatformVersion;

    /**
     * This column holds the model name of the device like iPhone 5 or Passion.
     *
     * @var string
     * @ORM\Column(name="device_model", type="string")
     */
    protected $deviceModel;

    /**
     * This column holds the name of the device's manufacturer like motorola, apple.
     *
     * @var string
     * @ORM\Column(name="device_manufacturer", type="string")
     */
    protected $deviceManufacturer;

    /**
     * This column holds the timestamp from when the device was registered to the API. It will be automatically
     * assigned when the record is persisted into the database.
     *
     * @var \DateTime
     * @ORM\Column(name="registration_date", type="datetime")
     * @Gedmo\Timestampable(on="create")
     */
    protected $registrationDate;

    /**
     * This column holds the timestamp from the client's last usage of the API.
     *
     * @var \DateTime
     * @ORM\Column(name="last_active", type="datetime")
     */
    protected $lastActive;

    /**
     * This column holds the timestamp of the date the record was soft deleted. The record will still exist in the
     * database but marked as unactive.
     *
     * @var \DateTime
     * @ORM\Column(name="date_removed", type="datetime", nullable=true)
     */
    protected $dateRemoved;

    /**
     * This method gets the UUID property.
     *
     * @return string
     */
    public function getUUID()
    {
        return $this->UUID;
    }

    /**
     * This method sets the UUID property.
     *
     * @param string $UUID
     */
    public function setUUID($UUID)
    {
        $this->UUID = $UUID;
    }

    /**
     * This method gets the Id property.
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * This method sets the id property.
     *
     * @param mixed $id
     */
    public function setId($id)
    {
        $this->id = $id;
    }

    /**
     * This method gets the DevicePlatform property.
     *
     * @return string
     */
    public function getDevicePlatform()
    {
        return $this->devicePlatform;
    }

    /**
     * This method sets the devicePlatform property.
     *
     * @param string $devicePlatform
     */
    public function setDevicePlatform($devicePlatform)
    {
        $this->devicePlatform = $devicePlatform;
    }

    /**
     * This method gets the DevicePlatformVersion property.
     *
     * @return mixed
     */
    public function getDevicePlatformVersion()
    {
        return $this->devicePlatformVersion;
    }

    /**
     * This method sets the devicePlatformVersion property.
     *
     * @param mixed $devicePlatformVersion
     */
    public function setDevicePlatformVersion($devicePlatformVersion)
    {
        $this->devicePlatformVersion = $devicePlatformVersion;
    }

    /**
     * This method gets the DeviceModel property.
     *
     * @return mixed
     */
    public function getDeviceModel()
    {
        return $this->deviceModel;
    }

    /**
     * This method sets the deviceModel property.
     *
     * @param mixed $deviceModel
     */
    public function setDeviceModel($deviceModel)
    {
        $this->deviceModel = $deviceModel;
    }

    /**
     * This method gets the DeviceManufacturer property.
     *
     * @return mixed
     */
    public function getDeviceManufacturer()
    {
        return $this->deviceManufacturer;
    }

    /**
     * This method sets the deviceManufacturer property.
     *
     * @param mixed $deviceManufacturer
     */
    public function setDeviceManufacturer($deviceManufacturer)
    {
        $this->deviceManufacturer = $deviceManufacturer;
    }

    /**
     * This method gets the RegistrationDate property.
     *
     * @return \DateTime
     */
    public function getRegistrationDate()
    {
        return $this->registrationDate;
    }

    /**
     * This method sets the registrationDate property.
     *
     * @param \DateTime $registrationDate
     */
    public function setRegistrationDate($registrationDate)
    {
        $this->registrationDate = $registrationDate;
    }

    /**
     * This method gets the LastActive property.
     *
     * @return mixed
     */
    public function getLastActive()
    {
        return $this->lastActive;
    }

    /**
     * This method sets the lastActive property.
     *
     * @param mixed $lastActive
     */
    public function setLastActive($lastActive)
    {
        $this->lastActive = $lastActive;
    }

    /**
     * This method gets the DateRemoved property.
     *
     * @return mixed
     */
    public function getDateRemoved()
    {
        return $this->dateRemoved;
    }

    /**
     * This method sets the dateRemoved property.
     *
     * @param mixed $dateRemoved
     */
    public function setDateRemoved($dateRemoved)
    {
        $this->dateRemoved = $dateRemoved;
    }
}