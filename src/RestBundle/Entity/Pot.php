<?php
/**
 * Author: Joris Rietveld <jorisrietveld@gmail.com>
 * Created: 31-05-2017 21:19
 * Licence: GNU General Public licence version 3 <https://www.gnu.org/licenses/quick-guide-gplv3.html>
 */
declare(strict_types=1);

namespace RestBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;

/**
 * @ORM\Entity
 * @ORM\Table(name="Pot")
 * @Gedmo\SoftDeleteable(fieldName="dateRemoved", timeAware=false)
 */
class Pot implements UserInterface, \Serializable
{
    /**
     * This column holds the unique record identification code that is generated by the database upon record creation.
     *
     * @var int
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;
    protected $potMacAddress;
    protected $potUniqueHash;
    protected $plainPassword;
    protected $registrationDate;
    protected $activationDate;
    protected $dateRemoved;

    protected $passwordEncoder;

    /**
     * Returns the roles granted to the user.
     *
     * @return (Role|string)[] The user roles
     */
    public function getRoles()
    {
        return ['ROLE_USER'];
    }

    /**
     * Returns the password (secret pot hash) used to authenticate the client.
     *
     * @return string The password
     */
    public function getPassword()
    {
        return $this->potUniqueHash;
    }

    /**
     * This method returns null because
     * @return string|null The salt
     */
    public function getSalt()
    {
        return null;
    }

    /**
     * Returns the username used to authenticate the user.
     *
     * @return string The username
     */
    public function getUsername()
    {
        return $this->potMacAddress;
    }

    public function getMacAddress()
    {
        return $this->getUsername();
    }

    /**
     * Removes sensitive data from the user.
     *
     * This is important if, at any given point, sensitive information like
     * the plain-text password is stored on this object.
     */
    public function eraseCredentials()
    {
        $this->plainPassword = null;
    }

    public function serialize()
    {
        return serialize([
            $this->id,
            $this->potMacAddress,
            $this->potUniqueHash,
            $this->registrationDate,
            $this->activationDate,
            $this->dateRemoved,
        ]);
    }

    public function unserialize($serialized)
    {
        list (
            $this->id,
            $this->potMacAddress,
            $this->potUniqueHash,
            $this->registrationDate,
            $this->activationDate,
            $this->dateRemoved,
            ) = unserialize($serialized);
    }


}